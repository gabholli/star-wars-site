import { ServerBuild, AppLoadContext } from 'react-router';
import { Context } from '@netlify/functions';
import { Plugin } from 'vite';

type LoadContext = AppLoadContext & Context;
/**
 * A function that returns the value to use as `context` in route `loader` and
 * `action` functions.
 *
 * You can think of this as an escape hatch that allows you to pass
 * environment/platform-specific values through to your loader/action.
 */
type GetLoadContextFunction = (request: Request, context: Context) => Promise<LoadContext> | LoadContext;
type RequestHandler = (request: Request, context: LoadContext) => Promise<Response | void>;
/**
 * Given a build and a callback to get the base loader context, this returns
 * a Netlify Function handler (https://docs.netlify.com/functions/overview/) which renders the
 * requested path. The loader context in this lifecycle will contain the Netlify Functions context
 * fields merged in.
 */
declare function createRequestHandler({ build, mode, getLoadContext, }: {
    build: ServerBuild;
    mode?: string;
    getLoadContext?: GetLoadContextFunction;
}): RequestHandler;

declare function netlifyPlugin(): Plugin;

export { type GetLoadContextFunction, type RequestHandler, createRequestHandler, netlifyPlugin as default };
