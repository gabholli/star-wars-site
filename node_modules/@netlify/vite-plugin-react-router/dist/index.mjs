// src/server.ts
import { createRequestHandler as createReactRouterRequestHandler } from "react-router";
function createRequestHandler({
  build,
  mode,
  getLoadContext
}) {
  const reactRouterHandler = createReactRouterRequestHandler(build, mode);
  return async (request, netlifyContext) => {
    const start = Date.now();
    console.log(`[${request.method}] ${request.url}`);
    try {
      const mergedLoadContext = await getLoadContext?.(request, netlifyContext) || netlifyContext;
      const response = await reactRouterHandler(request, mergedLoadContext);
      response.headers.set("x-nf-runtime", "Node");
      console.log(`[${response.status}] ${request.url} (${Date.now() - start}ms)`);
      return response;
    } catch (error) {
      console.error(error);
      return new Response("Internal Error", { status: 500 });
    }
  };
}

// src/plugin.ts
import { mkdir, writeFile } from "node:fs/promises";
import { join, relative, sep } from "node:path";
import { sep as posixSep } from "node:path/posix";

// package.json
var name = "@netlify/vite-plugin-react-router";
var version = "1.0.0";

// src/plugin.ts
var NETLIFY_FUNCTIONS_DIR = ".netlify/v1/functions";
var FUNCTION_FILENAME = "react-router-server.mjs";
var FUNCTION_HANDLER_CHUNK = "server";
var FUNCTION_HANDLER_MODULE_ID = "virtual:netlify-server";
var RESOLVED_FUNCTION_HANDLER_MODULE_ID = `\0${FUNCTION_HANDLER_MODULE_ID}`;
var toPosixPath = (path) => path.split(sep).join(posixSep);
var FUNCTION_HANDLER = (
  /* js */
  `
import { createRequestHandler } from "@netlify/vite-plugin-react-router";
import * as build from "virtual:react-router/server-build";
export default createRequestHandler({
  build,
  getLoadContext: async (_req, ctx) => ctx,
});
`
);
function generateNetlifyFunction(handlerPath) {
  return (
    /* js */
    `
    export { default } from "${handlerPath}";

    export const config = {
      name: "React Router server handler",
      generator: "${name}@${version}",
      path: "/*",
      preferStatic: true,
    };
    `
  );
}
function netlifyPlugin() {
  let resolvedConfig;
  let isProductionSsrBuild = false;
  return {
    name: "vite-plugin-netlify-react-router",
    config(config, { command, isSsrBuild }) {
      isProductionSsrBuild = isSsrBuild === true && command === "build";
      if (isProductionSsrBuild) {
        config.build ??= {};
        config.build.rollupOptions ??= {};
        config.build.rollupOptions.input = {
          [FUNCTION_HANDLER_CHUNK]: FUNCTION_HANDLER_MODULE_ID
        };
        config.build.rollupOptions.output ??= {};
        if (Array.isArray(config.build.rollupOptions.output)) {
          console.warn(
            "Expected Vite config `build.rollupOptions.output` to be an object, but it is an array - overwriting it, but this may cause issues with your custom configuration"
          );
          config.build.rollupOptions.output = {};
        }
        config.build.rollupOptions.output.entryFileNames = "[name].js";
      }
    },
    async resolveId(source) {
      if (source === FUNCTION_HANDLER_MODULE_ID) {
        return RESOLVED_FUNCTION_HANDLER_MODULE_ID;
      }
    },
    // See https://vitejs.dev/guide/api-plugin#virtual-modules-convention.
    load(id) {
      if (id === RESOLVED_FUNCTION_HANDLER_MODULE_ID) {
        return FUNCTION_HANDLER;
      }
    },
    async configResolved(config) {
      resolvedConfig = config;
    },
    // See https://rollupjs.org/plugin-development/#writebundle.
    async writeBundle() {
      if (isProductionSsrBuild) {
        const functionsDirectory = join(resolvedConfig.root, NETLIFY_FUNCTIONS_DIR);
        await mkdir(functionsDirectory, { recursive: true });
        const handlerPath = join(resolvedConfig.build.outDir, `${FUNCTION_HANDLER_CHUNK}.js`);
        const relativeHandlerPath = toPosixPath(relative(functionsDirectory, handlerPath));
        await writeFile(join(functionsDirectory, FUNCTION_FILENAME), generateNetlifyFunction(relativeHandlerPath));
      }
    }
  };
}
export {
  createRequestHandler,
  netlifyPlugin as default
};
